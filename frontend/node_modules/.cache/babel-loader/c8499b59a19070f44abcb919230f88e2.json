{"ast":null,"code":"import _toConsumableArray from\"D:/Coding Archive/Git Repo/PrivateProject/prj04/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"D:/Coding Archive/Git Repo/PrivateProject/prj04/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import axios from\"axios\";import React,{useState}from\"react\";import Loading from\"../pages/Loading\";import\"../style/CharactersInfo.css\";import Contentsbox from\"./Contentsbox\";import{jsx as _jsx}from\"react/jsx-runtime\";var CharactersInfo=function CharactersInfo(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),loading=_useState6[0],setLoading=_useState6[1];var url='characters';var startNum=0;var endNum=8;var readData=function readData(){axios.get(\"https://api.genshin.dev/characters\").then(function(response){// 정상적으로 데이터를 불러오면, setData 함수를 이용하여 data 변수에 데이터를 넣는다.\n// 무한 스크롤 기능 구현을 위해 setData가 실행될 때 모든 데이터를 다 사용하지 않는다.\nvar newData=[];response.data.slice(startNum,endNum).forEach(function(element){newData.push(element);});setData(function(oldData){return[].concat(_toConsumableArray(oldData),newData);});console.log(newData);setLoading(false);setError(false);}).catch(function(Error){//데이터가 정상적으로 불러오지 못하면, setError 함수를 이용하여 error 변수의 값을 true로 전환한다.\nsetError(true);console.log('Character setData Error!');});};var handleScrollCharacter=function handleScrollCharacter(event){// // 스크롤 바의 위치 (최상단 지점)\n// console.log('top : ', event.target.documentElement.scrollTop);\n// // 실제 내부 픽셀의 길이\n// console.log('window : ', window.innerHeight);\n// // 스크롤의 총 길이\n// console.log('height : ', event.target.documentElement.scrollHeight);\nif(window.innerHeight+event.target.documentElement.scrollTop+1>=event.target.documentElement.scrollHeight){startNum=endNum;endNum=startNum+4;readData();}};React.useEffect(function(){readData();window.addEventListener('scroll',handleScrollCharacter);// eslint-disable-next-line\n},[]);// 에러가 발생할 경우 '에러 발생' 문구만 화면에 띄워주기. \nif(error!==false){return'에러가 발생하였습니다.';}else if(loading!==false){return/*#__PURE__*/_jsx(Loading,{});}else{return/*#__PURE__*/_jsx(\"div\",{className:\"itemcontainer-body\",children:/*#__PURE__*/_jsx(\"div\",{className:\"itemcontainer-body-content\",children:/*#__PURE__*/_jsx(Contentsbox,{data:data,url:url})})});}};export default CharactersInfo;","map":{"version":3,"names":["axios","React","useState","Loading","Contentsbox","CharactersInfo","data","setData","error","setError","loading","setLoading","url","startNum","endNum","readData","get","then","response","newData","slice","forEach","element","push","oldData","console","log","catch","Error","handleScrollCharacter","event","window","innerHeight","target","documentElement","scrollTop","scrollHeight","useEffect","addEventListener"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj04/frontend/src/components/CharactersInfo.js"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport Loading from \"../pages/Loading\";\r\nimport \"../style/CharactersInfo.css\";\r\n\r\nimport Contentsbox from \"./Contentsbox\";\r\n\r\nconst CharactersInfo = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n\tconst [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const url = 'characters';\r\n\r\n    let startNum = 0;\r\n    let endNum = 8;\r\n\r\n    const readData = () => {\r\n        axios\r\n\t\t.get(\"https://api.genshin.dev/characters\")\r\n\t\t.then(response => {\r\n            // 정상적으로 데이터를 불러오면, setData 함수를 이용하여 data 변수에 데이터를 넣는다.\r\n            // 무한 스크롤 기능 구현을 위해 setData가 실행될 때 모든 데이터를 다 사용하지 않는다.\r\n            const newData = [];\r\n            response.data.slice(startNum, endNum).forEach(element => { newData.push(element); });\r\n            setData((oldData => [...oldData, ...newData]));\r\n            console.log(newData);\r\n            setLoading(false);\r\n            setError(false);\r\n\t\t})\r\n        .catch(Error => {\r\n\t\t\t//데이터가 정상적으로 불러오지 못하면, setError 함수를 이용하여 error 변수의 값을 true로 전환한다.\r\n\t\t\tsetError(true);\r\n\t\t\tconsole.log('Character setData Error!');\r\n\t\t});\r\n    };\r\n\r\n    const handleScrollCharacter = (event) => {\r\n        // // 스크롤 바의 위치 (최상단 지점)\r\n        // console.log('top : ', event.target.documentElement.scrollTop);\r\n        // // 실제 내부 픽셀의 길이\r\n        // console.log('window : ', window.innerHeight);\r\n        // // 스크롤의 총 길이\r\n        // console.log('height : ', event.target.documentElement.scrollHeight);\r\n\r\n        if (window.innerHeight + event.target.documentElement.scrollTop + 1 >= event.target.documentElement.scrollHeight) {\r\n            startNum = endNum;\r\n            endNum = startNum + 4;\r\n            readData();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        readData();\r\n        window.addEventListener('scroll', handleScrollCharacter); // eslint-disable-next-line\r\n    }, []);\r\n\r\n    // 에러가 발생할 경우 '에러 발생' 문구만 화면에 띄워주기. \r\n    if (error !== false){\r\n        return '에러가 발생하였습니다.';\r\n    }\r\n    else if (loading !== false){\r\n        return <Loading/>;\r\n    }\r\n    else {\r\n        return (\r\n            <div className='itemcontainer-body'>\r\n                <div className='itemcontainer-body-content'>\r\n                    <Contentsbox \r\n                    data={data} \r\n                    url={url} \r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharactersInfo;"],"mappings":"oSAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAOC,MAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,QAAP,KAAoB,kBAApB,CACA,MAAO,6BAAP,CAEA,MAAOC,YAAP,KAAwB,eAAxB,C,2CAEA,GAAMC,eAAc,CAAG,QAAjBA,eAAiB,EAAM,CAEzB,cAAwBH,QAAQ,CAAC,EAAD,CAAhC,wCAAOI,IAAP,eAAaC,OAAb,eACH,eAA0BL,QAAQ,CAAC,KAAD,CAAlC,yCAAOM,KAAP,eAAcC,QAAd,eACG,eAA8BP,QAAQ,CAAC,IAAD,CAAtC,yCAAOQ,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,IAAG,CAAG,YAAZ,CAEA,GAAIC,SAAQ,CAAG,CAAf,CACA,GAAIC,OAAM,CAAG,CAAb,CAEA,GAAMC,SAAQ,CAAG,QAAXA,SAAW,EAAM,CACnBf,KAAK,CACVgB,GADK,CACD,oCADC,EAELC,IAFK,CAEA,SAAAC,QAAQ,CAAI,CACR;AACA;AACA,GAAMC,QAAO,CAAG,EAAhB,CACAD,QAAQ,CAACZ,IAAT,CAAcc,KAAd,CAAoBP,QAApB,CAA8BC,MAA9B,EAAsCO,OAAtC,CAA8C,SAAAC,OAAO,CAAI,CAAEH,OAAO,CAACI,IAAR,CAAaD,OAAb,EAAwB,CAAnF,EACAf,OAAO,CAAE,SAAAiB,OAAO,qCAAQA,OAAR,EAAoBL,OAApB,GAAT,CAAP,CACAM,OAAO,CAACC,GAAR,CAAYP,OAAZ,EACAR,UAAU,CAAC,KAAD,CAAV,CACAF,QAAQ,CAAC,KAAD,CAAR,CACT,CAXK,EAYCkB,KAZD,CAYO,SAAAC,KAAK,CAAI,CACrB;AACAnB,QAAQ,CAAC,IAAD,CAAR,CACAgB,OAAO,CAACC,GAAR,CAAY,0BAAZ,EACA,CAhBK,EAiBH,CAlBD,CAoBA,GAAMG,sBAAqB,CAAG,QAAxBA,sBAAwB,CAACC,KAAD,CAAW,CACrC;AACA;AACA;AACA;AACA;AACA;AAEA,GAAIC,MAAM,CAACC,WAAP,CAAqBF,KAAK,CAACG,MAAN,CAAaC,eAAb,CAA6BC,SAAlD,CAA8D,CAA9D,EAAmEL,KAAK,CAACG,MAAN,CAAaC,eAAb,CAA6BE,YAApG,CAAkH,CAC9GvB,QAAQ,CAAGC,MAAX,CACAA,MAAM,CAAGD,QAAQ,CAAG,CAApB,CACAE,QAAQ,GACX,CACJ,CAbD,CAeAd,KAAK,CAACoC,SAAN,CAAgB,UAAM,CAClBtB,QAAQ,GACRgB,MAAM,CAACO,gBAAP,CAAwB,QAAxB,CAAkCT,qBAAlC,EAA0D;AAC7D,CAHD,CAGG,EAHH,EAKA;AACA,GAAIrB,KAAK,GAAK,KAAd,CAAoB,CAChB,MAAO,cAAP,CACH,CAFD,IAGK,IAAIE,OAAO,GAAK,KAAhB,CAAsB,CACvB,mBAAO,KAAC,OAAD,IAAP,CACH,CAFI,IAGA,CACD,mBACI,YAAK,SAAS,CAAC,oBAAf,uBACI,YAAK,SAAS,CAAC,4BAAf,uBACI,KAAC,WAAD,EACA,IAAI,CAAEJ,IADN,CAEA,GAAG,CAAEM,GAFL,EADJ,EADJ,EADJ,CAUH,CACJ,CAtED,CAwEA,cAAeP,eAAf"},"metadata":{},"sourceType":"module"}