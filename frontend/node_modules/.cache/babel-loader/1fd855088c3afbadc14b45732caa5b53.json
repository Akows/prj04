{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding Archive\\\\Git Repo\\\\PrivateProject\\\\prj04\\\\frontend\\\\src\\\\components\\\\CharactersInfo.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport Loading from \"../pages/Loading\";\nimport \"../style/CharactersInfo.css\";\nimport Contentsbox from \"./Contentsbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CharactersInfo = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const url = 'characters';\n  let startNum = 0;\n  let endNum = 8;\n\n  const readData = () => {\n    axios.get(\"https://api.genshin.dev/characters\").then(response => {\n      // 정상적으로 데이터를 불러오면, setData 함수를 이용하여 data 변수에 데이터를 넣는다.\n      // 무한 스크롤 기능 구현을 위해 setData가 실행될 때 모든 데이터를 다 사용하지 않는다.\n      const newData = [];\n      response.data.slice(startNum, endNum).forEach(element => {\n        newData.push(element);\n      });\n      setData(oldData => [...oldData, ...newData]);\n      console.log(newData);\n      setLoading(false);\n      setError(false);\n    }).catch(Error => {\n      //데이터가 정상적으로 불러오지 못하면, setError 함수를 이용하여 error 변수의 값을 true로 전환한다.\n      setError(true);\n      console.log('Character setData Error!');\n    });\n  };\n\n  const handleScrollCharacter = event => {\n    // // 스크롤 바의 위치 (최상단 지점)\n    // console.log('top : ', event.target.documentElement.scrollTop);\n    // // 실제 내부 픽셀의 길이\n    // console.log('window : ', window.innerHeight);\n    // // 스크롤의 총 길이\n    // console.log('height : ', event.target.documentElement.scrollHeight);\n    if (window.innerHeight + event.target.documentElement.scrollTop + 1 >= event.target.documentElement.scrollHeight) {\n      startNum = endNum;\n      endNum = startNum + 4;\n      readData();\n    }\n  };\n\n  React.useEffect(() => {\n    readData();\n    window.addEventListener('scroll', handleScrollCharacter); // eslint-disable-next-line\n  }, []); // 에러가 발생할 경우 '에러 발생' 문구만 화면에 띄워주기. \n\n  if (error !== false) {\n    return '에러가 발생하였습니다.';\n  } else if (loading !== false) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itemcontainer-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemcontainer-body-content\",\n        children: /*#__PURE__*/_jsxDEV(Contentsbox, {\n          data: data,\n          url: url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(CharactersInfo, \"JQiOuv/8YX/oEvZ+ddBgS9XHLZw=\");\n\n_c = CharactersInfo;\nexport default CharactersInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharactersInfo\");","map":{"version":3,"names":["axios","React","useState","Loading","Contentsbox","CharactersInfo","data","setData","error","setError","loading","setLoading","url","startNum","endNum","readData","get","then","response","newData","slice","forEach","element","push","oldData","console","log","catch","Error","handleScrollCharacter","event","window","innerHeight","target","documentElement","scrollTop","scrollHeight","useEffect","addEventListener"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj04/frontend/src/components/CharactersInfo.js"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport Loading from \"../pages/Loading\";\r\nimport \"../style/CharactersInfo.css\";\r\n\r\nimport Contentsbox from \"./Contentsbox\";\r\n\r\nconst CharactersInfo = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n\tconst [error, setError] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const url = 'characters';\r\n\r\n    let startNum = 0;\r\n    let endNum = 8;\r\n\r\n    const readData = () => {\r\n        axios\r\n\t\t.get(\"https://api.genshin.dev/characters\")\r\n\t\t.then(response => {\r\n            // 정상적으로 데이터를 불러오면, setData 함수를 이용하여 data 변수에 데이터를 넣는다.\r\n            // 무한 스크롤 기능 구현을 위해 setData가 실행될 때 모든 데이터를 다 사용하지 않는다.\r\n            const newData = [];\r\n            response.data.slice(startNum, endNum).forEach(element => { newData.push(element); });\r\n            setData((oldData => [...oldData, ...newData]));\r\n            console.log(newData);\r\n            setLoading(false);\r\n            setError(false);\r\n\t\t})\r\n        .catch(Error => {\r\n\t\t\t//데이터가 정상적으로 불러오지 못하면, setError 함수를 이용하여 error 변수의 값을 true로 전환한다.\r\n\t\t\tsetError(true);\r\n\t\t\tconsole.log('Character setData Error!');\r\n\t\t});\r\n    };\r\n\r\n    const handleScrollCharacter = (event) => {\r\n        // // 스크롤 바의 위치 (최상단 지점)\r\n        // console.log('top : ', event.target.documentElement.scrollTop);\r\n        // // 실제 내부 픽셀의 길이\r\n        // console.log('window : ', window.innerHeight);\r\n        // // 스크롤의 총 길이\r\n        // console.log('height : ', event.target.documentElement.scrollHeight);\r\n\r\n        if (window.innerHeight + event.target.documentElement.scrollTop + 1 >= event.target.documentElement.scrollHeight) {\r\n            startNum = endNum;\r\n            endNum = startNum + 4;\r\n            readData();\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        readData();\r\n        window.addEventListener('scroll', handleScrollCharacter); // eslint-disable-next-line\r\n    }, []);\r\n\r\n    // 에러가 발생할 경우 '에러 발생' 문구만 화면에 띄워주기. \r\n    if (error !== false){\r\n        return '에러가 발생하였습니다.';\r\n    }\r\n    else if (loading !== false){\r\n        return <Loading/>;\r\n    }\r\n    else {\r\n        return (\r\n            <div className='itemcontainer-body'>\r\n                <div className='itemcontainer-body-content'>\r\n                    <Contentsbox \r\n                    data={data} \r\n                    url={url} \r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharactersInfo;"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAO,6BAAP;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;EAAA;;EAEzB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;EACH,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,KAAD,CAAlC;EACG,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;EAEA,MAAMU,GAAG,GAAG,YAAZ;EAEA,IAAIC,QAAQ,GAAG,CAAf;EACA,IAAIC,MAAM,GAAG,CAAb;;EAEA,MAAMC,QAAQ,GAAG,MAAM;IACnBf,KAAK,CACVgB,GADK,CACD,oCADC,EAELC,IAFK,CAEAC,QAAQ,IAAI;MACR;MACA;MACA,MAAMC,OAAO,GAAG,EAAhB;MACAD,QAAQ,CAACZ,IAAT,CAAcc,KAAd,CAAoBP,QAApB,EAA8BC,MAA9B,EAAsCO,OAAtC,CAA8CC,OAAO,IAAI;QAAEH,OAAO,CAACI,IAAR,CAAaD,OAAb;MAAwB,CAAnF;MACAf,OAAO,CAAEiB,OAAO,IAAI,CAAC,GAAGA,OAAJ,EAAa,GAAGL,OAAhB,CAAb,CAAP;MACAM,OAAO,CAACC,GAAR,CAAYP,OAAZ;MACAR,UAAU,CAAC,KAAD,CAAV;MACAF,QAAQ,CAAC,KAAD,CAAR;IACT,CAXK,EAYCkB,KAZD,CAYOC,KAAK,IAAI;MACrB;MACAnB,QAAQ,CAAC,IAAD,CAAR;MACAgB,OAAO,CAACC,GAAR,CAAY,0BAAZ;IACA,CAhBK;EAiBH,CAlBD;;EAoBA,MAAMG,qBAAqB,GAAIC,KAAD,IAAW;IACrC;IACA;IACA;IACA;IACA;IACA;IAEA,IAAIC,MAAM,CAACC,WAAP,GAAqBF,KAAK,CAACG,MAAN,CAAaC,eAAb,CAA6BC,SAAlD,GAA8D,CAA9D,IAAmEL,KAAK,CAACG,MAAN,CAAaC,eAAb,CAA6BE,YAApG,EAAkH;MAC9GvB,QAAQ,GAAGC,MAAX;MACAA,MAAM,GAAGD,QAAQ,GAAG,CAApB;MACAE,QAAQ;IACX;EACJ,CAbD;;EAeAd,KAAK,CAACoC,SAAN,CAAgB,MAAM;IAClBtB,QAAQ;IACRgB,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCT,qBAAlC,EAFkB,CAEwC;EAC7D,CAHD,EAGG,EAHH,EA9CyB,CAmDzB;;EACA,IAAIrB,KAAK,KAAK,KAAd,EAAoB;IAChB,OAAO,cAAP;EACH,CAFD,MAGK,IAAIE,OAAO,KAAK,KAAhB,EAAsB;IACvB,oBAAO,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,QAAP;EACH,CAFI,MAGA;IACD,oBACI;MAAK,SAAS,EAAC,oBAAf;MAAA,uBACI;QAAK,SAAS,EAAC,4BAAf;QAAA,uBACI,QAAC,WAAD;UACA,IAAI,EAAEJ,IADN;UAEA,GAAG,EAAEM;QAFL;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAUH;AACJ,CAtED;;GAAMP,c;;KAAAA,c;AAwEN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}